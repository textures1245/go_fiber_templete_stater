// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/phakh/go/src/github.com/textures1245/go-template/internal/user/repository.go
//
// Generated by this command:
//
//	mockgen -source=/Users/phakh/go/src/github.com/textures1245/go-template/internal/user/repository.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	entities "github.com/textures1245/go-template/internal/auth/entities"
	entities0 "github.com/textures1245/go-template/internal/user/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *entities0.UserCreatedReq) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// DeleteUserById mocks base method.
func (m *MockUserRepository) DeleteUserById(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockUserRepositoryMockRecorder) DeleteUserById(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserById), ctx, userID)
}

// FindUserAsPassport mocks base method.
func (m *MockUserRepository) FindUserAsPassport(ctx context.Context, username string) (*entities.UsersPassport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserAsPassport", ctx, username)
	ret0, _ := ret[0].(*entities.UsersPassport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserAsPassport indicates an expected call of FindUserAsPassport.
func (mr *MockUserRepositoryMockRecorder) FindUserAsPassport(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserAsPassport", reflect.TypeOf((*MockUserRepository)(nil).FindUserAsPassport), ctx, username)
}

// FindUserByUsernameAndPassword mocks base method.
func (m *MockUserRepository) FindUserByUsernameAndPassword(ctx context.Context, req *entities0.UserLoginReq) (*entities0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsernameAndPassword", ctx, req)
	ret0, _ := ret[0].(*entities0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsernameAndPassword indicates an expected call of FindUserByUsernameAndPassword.
func (mr *MockUserRepositoryMockRecorder) FindUserByUsernameAndPassword(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsernameAndPassword", reflect.TypeOf((*MockUserRepository)(nil).FindUserByUsernameAndPassword), ctx, req)
}

// GetUserById mocks base method.
func (m *MockUserRepository) GetUserById(ctx context.Context, userID int64) (*entities0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userID)
	ret0, _ := ret[0].(*entities0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryMockRecorder) GetUserById(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepository)(nil).GetUserById), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockUserRepository) GetUsers(ctx context.Context) ([]*entities0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*entities0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepositoryMockRecorder) GetUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepository)(nil).GetUsers), ctx)
}

// UpdateUserById mocks base method.
func (m *MockUserRepository) UpdateUserById(ctx context.Context, userID int64, user *entities0.UserUpdateReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserById indicates an expected call of UpdateUserById.
func (mr *MockUserRepositoryMockRecorder) UpdateUserById(ctx, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserById), ctx, userID, user)
}
